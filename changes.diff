diff --git a/src/movie/movie.module.ts b/src/movie/movie.module.ts
index 4fb044b..aada6c0 100644
--- a/src/movie/movie.module.ts
+++ b/src/movie/movie.module.ts
@@ -1,8 +1,15 @@
 import { Module } from '@nestjs/common';
 import { MovieService } from './movie.service';
 import { MovieController } from './movie.controller';
+import { TypeOrmModule } from '@nestjs/typeorm';
+import { Movie } from './entities/movie.entity';
 
 @Module({
+  imports:[
+    TypeOrmModule.forFeature([
+      Movie,
+    ])
+  ],
   controllers: [MovieController],
   providers: [MovieService],
 })
diff --git a/src/movie/movie.service.ts b/src/movie/movie.service.ts
index 6fbb4ea..d762c5c 100644
--- a/src/movie/movie.service.ts
+++ b/src/movie/movie.service.ts
@@ -2,89 +2,77 @@ import { Body, Injectable, NotFoundException } from '@nestjs/common';
 import { CreateMovieDto } from './dto/create-movie.dto';
 import { UpdateMovieDto } from './dto/update-movie.dto';
 import { Movie } from './entities/movie.entity';
+import { InjectRepository } from '@nestjs/typeorm';
+import { Repository } from 'typeorm';
 
 
 @Injectable()
 export class MovieService {
-  
-    private movies: Movie[] = [];
-
-    constructor() {
-      const movie1 = new Movie();
-
-      movie1.id = 1;
-      movie1.title = '해리포터';
-      movie1.genre = '판타지';
 
-      const movie2 = new Movie();
-      movie2.id = 2;
-      movie2.title = '반지의 제왕';
-      movie2.genre = '판타지';
-
-      this.movies.push(movie1, movie2);
-    }
+    constructor(
+      @InjectRepository(Movie)
+      private readonly movieRepository: Repository<Movie>
+    ) {}
   
     private idCounter = 3;
     
     getManyMovies(title?: string){
-      if(!title){
-        return this.movies;
-      }
-      return this.movies.filter((m) => m.title.includes(title));
+      /// 나중에 title 필터 기능 추가하기
+      return this.movieRepository.find();
     }
   
-    getMovieById(id: number){
-      const movie = this.movies.find((m) => m.id === + id);
-  
+    async getMovieById(id: number){
+      const movie = await this.movieRepository.findOne({
+        where: {
+          id,
+        }
+      });
+
       if (!movie){
         throw new NotFoundException('존재하지 않는 ID 값의 영화입니다.');
-      }
-  
+      } 
       return movie;
     }
   
-    createMovie(createMovieDto: CreateMovieDto){
-      const movie: Movie= {
-        id: this.idCounter,
-        ...createMovieDto,
-        createdAt: new Date(), 
-        updatedAt: new Date(),
-        version: 1
-      }
-      this.movies.push(movie);
+    async createMovie(createMovieDto: CreateMovieDto){
+      const movie = await this.movieRepository.save(createMovieDto);
 
       return movie;
     }
   
-    updateMovie(id: number, updateMovieDto: UpdateMovieDto){
-      const movie = this.movies.find((m) => m.id === +id);
+    async updateMovie(id: number, updateMovieDto: UpdateMovieDto){
+      const movie = this.movieRepository.findOne({
+        where: {
+          id,
+        }
+      })
   
       if (!movie){
         throw new NotFoundException('존재하지 않는 ID 값의 영화입니다.');
       }
-      // 스프레드 연산자 사용
-      const updatedMovie = {
-        ...movie,
-        ...updateMovieDto
-      };
       
-      // movies 배열의 해당 영화 정보 업데이트
-      const movieIndex = this.movies.findIndex((m) => m.id === +id);
-      this.movies[movieIndex] = updatedMovie;
+      const newMovie = await this.movieRepository.update(
+        { id },
+        updateMovieDto
+      )
 
-      return updatedMovie;
+      return newMovie;
     }
 
-    deleteMovie(id: number){
-      const movieIndex = this.movies.findIndex((m) => m.id === +id);
+    async deleteMovie(id: number){
+      const movie = await this.movieRepository.findOne({
+        where: {
+          id,
+        }
+      });
   
-      if (movieIndex === -1){
+      if (!movie){
         throw new NotFoundException('존재하지 않는 ID 값의 영화입니다.');
       }
       
-      this.movies.splice(movieIndex, 1)
+      await this.movieRepository.delete({ id });
   
-      return
+      return id;
   
     }
 }
